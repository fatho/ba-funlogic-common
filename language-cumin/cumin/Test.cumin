data Foo a b c
  = Foo (Bar a b -> Bar b c -> Bar a c)
  | Baz

not :: Bool -> Bool
not x = case x of
  True -> False
  False -> True

id :: forall a.a -> a
id x = x

tMap :: forall a b.(a -> b) -> Pair a a -> Pair b b
tMap f x = case x of Pair a b -> (f a, f b)

filter :: forall a.(a -> Bool) -> [a] -> [a]
filter f x = case x of
  Nil -> Nil
  Cons y ys -> case f y of
    True -> Cons y (filter<:a:> f ys)
    False -> filter<:a:> f ys

inc :: Int -> Int
inc x = x + 1

foo :: Pair Int Int
foo = tMap<:Int,Int:> inc (1,3)

pred :: Int -> Bool
pred x = not (x == 1)

bar :: [Int]
bar = filter pred [1,4,1,1,2,1,1]

maybeInc :: Int -> Int
maybeInc x = let c :: Bool free in case c of
  True  -> x + 1
  False -> x

maybeInc2 :: Int -> Int
maybeInc2 = let c :: Bool free in case c of
  True  -> inc
  False -> id

{- Just a boring comment -}

{--}
{- ^ comments may be empty -}

{- comments can be {- nested -} -}

{- multi-line
   comments
   are no problem,
   not {- even
   with nesting -}
-}

{- special chars - in comments { are handled } correctly --}
