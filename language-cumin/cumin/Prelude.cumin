data Pair a b = Pair a b

data List a = Nil | Cons a (List a)

data Maybe a = Nothing | Just a

data Either a b = Left a | Right b

data Bool = False | True

{- * Useful functions for higher order programming -}

id :: forall a. a -> a
id x = x

const :: forall a b.a -> b -> a
const c x = c

flip :: forall a b c. (a -> b -> c) -> b -> a -> c
flip f x y = f y x

{- * Functions on pairs -}

fst :: forall a b. (a, b) -> a
fst p = case p of
  Pair x y -> x

snd :: forall a b. (a, b) -> b
snd p = case p of
  Pair x y -> y

{- * Non-Determinism -}

choose :: forall a.a -> a -> a
choose x y = let choice :: Bool free
  in case choice of
    False -> x
    True -> y

{- * Functions on Bool -}

not :: Bool -> Bool
not x = case x of
  True -> False
  False -> True

and :: Bool -> Bool -> Bool
and x y = case x of
  True -> case y of
    True -> True
    False -> False
  False -> False

or :: Bool -> Bool -> Bool
or x y = case x of
  True -> True
  False -> case y of
    True -> True
    False -> False

{- * Functions on lists -}

map :: forall a b. (a -> b) -> [a] -> [b]
map f xs = case xs of
  Nil -> Nil<:b:>
  Cons y ys -> Cons<:b:> (f y) (map<:a,b:> f ys)

filter :: forall a. (a -> Bool) -> [a] -> [a]
filter f x = case x of
  Nil -> Nil<:a:>
  Cons y ys -> case f y of
    True -> Cons<:a:> y (filter<:a:> f ys)
    False -> filter<:a:> f ys

foldr :: forall a b. (a -> b -> b) -> b -> [a] -> b
foldr f c xs = case xs of
  Nil -> c
  Cons y ys -> f y (foldr<:a,b:> f c ys)

length :: forall a. List a -> Nat
length xxs = case xxs of
  Nil -> 0
  Cons x xs -> 1 + length<:a:> xs

{- * Functions Either and Maybe -}

either :: forall a b c. (a -> c) -> (b -> c) -> Either a b -> c
either f g e = case e of
  Left x -> f x
  Right y -> g y

maybe :: forall a b. b -> (a -> b) -> Maybe a -> b
maybe n f m = case m of
  Nothing -> n
  Just x -> f x
