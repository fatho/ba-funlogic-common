data Foo a b c
  = Foo (Bar a b -> Bar b c -> Bar a c)
  | Baz

data Bar a b = Bar (Set a) (Set b)

data Maybe a = Just a | Nothing

data Either a b = Left a | Right b

data Phantom a = Phantom

const :: forall a b.a -> b -> a
const = \c :: a ->
        \x :: b -> c

not :: Bool -> Bool
not = \x :: Bool -> case x of
              True -> False
              False -> True

not2 :: Bool -> Bool
not2 = \x :: Bool -> case case x of { True -> False
; False -> True } of
  True  -> True
  False -> False

tMap :: forall a b.(a -> b) -> (a,a) -> (b,b)
tMap = \f :: (a->b) ->
       \x :: Pair a a -> case x of Pair a b -> Pair<:b,b:> (f a) (f b)

sMap :: forall a b.(a -> b) -> Set a -> Set b
sMap = \f :: (a -> b) ->
       \xs :: Set a -> xs >>= \x :: a -> {f x}

filter :: forall a.(a -> Bool) -> [a] -> [a]
filter = \f :: (a -> Bool) ->
         \x :: [a] -> case x of
           Nil -> Nil<:a:>
           Cons y ys -> case f y of
             True -> Cons<:a:> y (filter<:a:> f ys)
             False -> filter<:a:> f ys

foo :: Pair Nat Nat
foo = tMap<:Nat,Nat:> (\x :: Nat -> x + 1) (Pair<:Nat,Nat:> 1 3)

bar :: [Nat]
bar = filter<:Nat:> (\x :: Nat -> not (x == 1)) [1,4,1,1,2,1,1]<:Nat:>

pairWithAny :: forall a b. Data a => b -> Set (Pair a b)
pairWithAny = \y :: b -> unknown<:a:> >>= \x :: a -> {Pair<:a,b:> x y}

{- Data tests -}
dataRight :: forall a b c. (Data a, Data b) => Set (Pair [a] (Either (Maybe b) b))
dataRight =
  unknown<:[a]:> >>= \x :: [a] ->
  unknown<:Either (Maybe b) b:> >>= \y :: Either (Maybe b) b ->
      {Pair<:[a],Either (Maybe b) b:> x y}

{- This should not compile: -}
{-
dataWrong :: Pair (Maybe [Bool -> Set Bool]) Bool
dataWrong = pairWithAny<:(Maybe [Bool -> Set Bool]),Bool:> True
-}

{- Just a boring comment -}

{--}
{- ^ comments may be empty -}

{- comments can be {- nested -} -}

{- multi-line
   comments
   are no problem,
   not {- even
   with nesting -}
-}

{- special chars - in comments { are handled } correctly --}
