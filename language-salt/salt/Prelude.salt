data Pair a b = Pair a b

data List a = Nil | Cons a (List a)

data Maybe a = Nothing | Just a

data Either a b = Left a | Right b

data Bool = False | True

{- * Useful functions for higher order programming -}


id :: forall a. a -> a
id = \x :: a -> x

const :: forall a b.a -> b -> a
const = \c :: a ->
        \x :: b -> c

flip :: forall a b c. (a -> b -> c) -> b -> a -> c
flip = \f :: (a -> b -> c) ->
       \x :: b ->
       \y :: a -> f y x

{- * Functions on pairs -}

fst :: forall a b. (a, b) -> a
fst = \p :: (a,b) -> case p of
  Pair x y -> x

snd :: forall a b. (a, b) -> b
snd = \p :: (a,b) -> case p of
  Pair x y -> y

{- * Non-Determinism -}

choose :: forall a. Set a -> Set a -> Set a
choose = \xs :: Set a ->
         \ys :: Set a -> unknown<:Bool:>
            >>= \c :: Bool -> case c of
              False -> xs
              True -> ys
sMap :: forall a b. (a -> b) -> Set a -> Set b
sMap = \f :: (a -> b) ->
       \xs :: Set a -> xs >>= \x :: a -> {f x}

guard :: forall a. Bool -> Set a -> Set a
guard = \b :: Bool -> \x :: Set a -> case b of
  False -> failed<:Set a:>
  True  -> x

{- * Functions on Bool -}

not :: Bool -> Bool
not = \x :: Bool -> case x of
              True -> False
              False -> True

and :: Bool -> Bool -> Bool
and = \x :: Bool -> case x of
        True -> \y :: Bool -> case y of
          True -> True
          False -> False
        False -> const<:Bool,Bool:> False

or :: Bool -> Bool -> Bool
or = \x :: Bool -> case x of
       True -> const<:Bool,Bool:> True
       False ->  \y :: Bool -> case y of
         True -> True
         False -> False

{- * Functions on lists -}

map :: forall a b. (a -> b) -> [a] -> [b]
map = \f :: (a -> b) ->
      \xs :: [a] -> case xs of
        Nil -> Nil<:b:>
        Cons y ys -> Cons<:b:> (f y) (map<:a,b:> f ys)

filter :: forall a. (a -> Bool) -> [a] -> [a]
filter = \f :: (a -> Bool) ->
         \x :: [a] -> case x of
           Nil -> Nil<:a:>
           Cons y ys -> case f y of
             True -> Cons<:a:> y (filter<:a:> f ys)
             False -> filter<:a:> f ys

foldr :: forall a b. (a -> b -> b) -> b -> [a] -> b
foldr = \f :: (a -> b -> b) ->
        \c :: b ->
        \xs :: [a] -> case xs of
          Nil -> c
          Cons y ys -> f y (foldr<:a,b:> f c ys)

length :: forall a. List a -> Nat
length = foldr<:a,Nat:> (\x :: a -> \n :: Nat -> n + 1) 0

{- * Functions Either and Maybe -}

either :: forall a b c. (a -> c) -> (b -> c) -> Either a b -> c
either = \f :: (a -> c) ->
  \g :: (b -> c) ->
  \e :: Either a b -> case e of
    Left x -> f x
    Right y -> g y

maybe :: forall a b. b -> (a -> b) -> Maybe a -> b
maybe = \n :: b ->
  \f :: (a -> b) ->
  \m :: Maybe a -> case m of
    Nothing -> n
    Just x -> f x
